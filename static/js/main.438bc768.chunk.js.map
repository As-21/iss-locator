{"version":3,"sources":["components/Header.module.css","components/Footer.module.css","components/Paragraph.module.css","containers/About.module.css","containers/GoogleMap.module.css","content/ISS_about_picture.jpg","components/Header.js","components/Image.js","components/Paragraph.js","containers/About.js","components/LocationPin.js","components/MapComponent.js","containers/GoogleMap.js","components/Footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","headerContainer","sticky","mainNav","push","href","Image","src","require","alt","height","style","borderRadius","Paragraph","paragraph","About","aboutcontianer","LocationPin","text","icon","locationIcon","Map","latitude","longitude","zoomLevel","bootstrapURLKeys","key","defaultCenter","address","lat","lng","defaultZoom","GoogleMap","getData","fetch","then","response","json","position","setState","iss_position","state","this","console","log","googleMapContainer","MapComponent","type","onClick","Component","Footer","footerContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.438bc768.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__14vfI\",\"sticky\":\"Header_sticky__14uuV\",\"mainNav\":\"Header_mainNav__2UXAv\",\"push\":\"Header_push__3L2Xd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerContainer\":\"Footer_footerContainer__3dJvA\",\"mainNav\":\"Footer_mainNav__3vmbW\",\"push\":\"Footer_push__3H-4g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paragraph\":\"Paragraph_paragraph__nIxlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutcontianer\":\"About_aboutcontianer__1xmhL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"googleMapContainer\":\"GoogleMap_googleMapContainer__fkcPU\"};","module.exports = __webpack_public_path__ + \"static/media/ISS_about_picture.7501ae84.jpg\";","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<nav className={`${styles.headerContainer} ${styles.sticky}`}>\r\n\t\t\t<ul className={styles.mainNav}>\r\n\t\t\t\t<li className='tc'>International Space Station Locator</li>\r\n\t\t\t\t<li className={styles.push}><a href=\"https://en.wikipedia.org/wiki/International_Space_Station\">Wikipedia</a><a href=\"https://www.nasa.gov/mission_pages/station/main/index.html\">NASA</a></li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Image = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img className='' src={require(\"../content/ISS_about_picture.jpg\")}\r\n\t\t\t\talt=\"International Space Station\"\r\n\t\t\t\theight=\"auto\" style={{borderRadius: '20px'}} />\r\n\t\t</div>\t\t\t\r\n\t);\r\n}\r\n\r\nexport default Image;","import React from 'react';\r\nimport styles from './Paragraph.module.css';\r\n\r\nconst Paragraph = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p className={styles.paragraph}>\r\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sed orci enim. Fusce placerat venenatis enim. Pellentesque vestibulum malesuada magna. Suspendisse consequat elementum tellus, eu vestibulum felis tempor sit amet. Donec a nunc ut libero convallis porttitor quis sed neque. Nulla in metus justo. Mauris ut dui elementum, euismod diam eget, elementum lectus. Morbi porttitor semper metus, in feugiat quam ultrices eget. Phasellus et aliquet sem. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed semper pulvinar \r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Paragraph;","import React from 'react';\r\nimport Image from '../components/Image'\r\nimport Paragraph from '../components/Paragraph'\r\nimport styles from './About.module.css';\r\n\r\nconst About = () => {\r\n\treturn (\r\n\t\t<div className={styles.aboutcontianer}>\r\n\t\t\t<Image />\r\n\t\t\t<Paragraph />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport locationIcon from '@iconify/icons-mdi/map-marker';\r\n\r\nconst LocationPin = ({ text }) => {\r\n\treturn (\r\n\t  <div className=\"pin\">\r\n\t    <Icon icon={locationIcon} className=\"pin-icon\" />\r\n\t    <p className=\"pin-text\">{text}</p>\r\n\t  </div>\r\n\t);\r\n}\r\n\r\nexport default LocationPin;","import React from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport LocationPin from './LocationPin';\r\nimport './Map.css';\r\n\r\nconst Map = ({ latitude, longitude, zoomLevel }) => {\r\n\treturn (\r\n\t  <div className=\"map\">\r\n\t    <h2 className=\"map-h2\">International Space Station Location</h2>\r\n\r\n\t    <div className=\"google-map\">\r\n\t      <GoogleMapReact\r\n\t        bootstrapURLKeys={{ key: 'AIzaSyCSqYNBV3DUKT8w0c3BSFrt-3-ispdeC4I' }}\r\n\t        defaultCenter={{\r\n\t\t\t\t  address: 'International Space Station Location.',\r\n\t\t\t\t  lat: 37.42216,\r\n\t\t\t\t  lng: -122.08427,\r\n\t\t\t\t}}\r\n\t        defaultZoom={1}\r\n\t      >\r\n\t        <LocationPin \r\n\t          lat={latitude}\r\n\t          lng={longitude}\r\n\t          text={'International Space Station'}\r\n\t        />\r\n\t      </GoogleMapReact>\r\n\t    </div>\r\n\t  </div>\r\n\t);\r\n}\r\n\r\nexport default Map","import React, { Component } from 'react';\r\nimport MapComponent from '../components/MapComponent';\r\nimport styles from './GoogleMap.module.css';\r\n\r\nclass GoogleMap extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tlatitude: 37.42216,\r\n\t\t\tlongitude: -122.08427\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tthis.getData();\r\n\t}\r\n\r\n\tgetData = () => {\r\n\t\tfetch('http://api.open-notify.org/iss-now.json')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(position => {\r\n\t\t\t\tthis.setState({latitude: position.iss_position.latitude});\r\n\t\t\t\tthis.setState({longitude: position.iss_position.longitude});\t\t\r\n\t\t});\r\n\t}\r\n\r\n\trender () {\r\n\t\tconsole.log(this.state.latitude);\r\n\t\tconsole.log(this.state.longitude);\r\n\t\treturn (\r\n\t\t\t<div className={styles.googleMapContainer}>\r\n\t\t\t\t<MapComponent latitude={this.state.latitude} longitude={this.state.longitude} zoomLevel='2'/>\r\n\t\t\t\t<button type=\"button\" onClick={this.getData}>Refresh</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default GoogleMap;\r\n","import React from 'react';\r\nimport styles from './Footer.module.css';\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<nav className={styles.footerContainer}>\r\n\t\t\t<ul className={styles.mainNav}>\r\n\t\t\t\t<li className='tc'><a href=\"https://github.com/\">GitHub</a></li>\r\n\t\t\t\t<li className='tc'><a href=\"https://www.facebook.com/\">Facebook</a></li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport About from './About';\nimport GoogleMap from './GoogleMap';\nimport Footer from '../components/Footer';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<About />\n\t\t\t\t<GoogleMap />\n\t\t\t\t<Footer />\n    \t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}